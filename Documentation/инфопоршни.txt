Начинаю цикл статей, посвящённых вещам, необходимым для создания сюжета: профили сталкеров, инфопорции, диалоги...
Все эти вещи имеют скриптовую сторону (иначе бы я не стал об этом писать здесь=). Вопреки своему обыкновению я буду расписывать и форматы файлов, иначе не будет должной полноты картины.

Начнём с инфопорций
Инфопорция (infoportion - порция информации) представляет собой нечто вроде логической переменной. Инфопорция имеет имя и связанное с ним логическое значение.
Инфопорция всегда связана с каким-либо объектом. Инфопорция может быть установлена только для актора, сталкеров, монстров и торговца (иначе трейдера, единственный такой объект - Сидор). Если Инфопорция для объекта установлена в true, то говорят ещё "объект имеет инфопорцию, или объект имеет информацию". Инфопорции являются частью общего механизма построения сюжета. Комбинация выданных инфопорций у всех сюжетных персонажей, включая актора, как раз и определяет текущую точку сюжета. Инфопорции активно используются во всевозможных предусловиях в диалогах, влияют на условия торговли и т.п.

Имя инфопорции регистрируется заранее. Система такая:
В файле config\system.ltx есть секция [info_portions]. В этой секции единственный параметр files содержит перечень XML-файлов, содержащих описания инфопорций. Вы можете создать новый файл и вписать его в этот список, что более предпочтительно, или создать свою инфопорцию в одном из существующих файлов.
Формат файла с инфопорциями

<?xml version='1.0' encoding="windows-1251"?>
<game_information_portions>
    <info_portion id="very_simple_infoportion"/>
    
    <info_portion id="simple_infoportion">
    </info_portion>
    
    <info_portion id="some_infoportion">
        <action>some_module.some_action1</action>
        <action>some_module.some_action1</action>
        <disable>infoportion_to_disable_1</disable>
        <disable>infoportion_to_disable_2</disable>
        <article>article_name1</article>
        <article>article_name2</article>
        <article_disable>article_name3</article_disable>
        <article_disable>article_name4</article_disable>
        <task>task_name_1</task>
        <task>task_name_2</task>
        <dialog>some_dialog_1</dialog>
        <dialog>some_dialog_2</dialog>
    </info_portion>
</game_information_portions>

Показаны три варианта регистрации инфопорций. Все инфопорции во всех файлах должны иметь уникальные имена.
Функции для работы с инфопорциями
в основном это методы класса game_object:

bool give_info_portion(string <имя инфопорции>);  // выдать порцию информации
bool disable_info_portion(string <имя инфопорции>);  // забрать порцию информации

bool has_info(string <имя инфопорции>);   // проверка на наличие инфопорции
bool dont_has_info(string <имя инфопорции>);  // проверка на отсутствие инфопорции
CTime* get_info_time(string <имя инфопорции>); // получить время выдачи инфопорции. В ЗП убрана

Есть также два метода у класса alife_simulator:

bool has_info(const alife_simulator*, id, string <имя инфопорции>);
bool dont_has_info(const alife_simulator*, id, string <имя инфопорции>);

Видно, что в оффлайне не получится установить/снять инфопорции, только узнать его значение.

В минимальном случае для регистрации инфопорции достаточно имени, как это сделано в примере для very_simple_infoportion и simple_infoportion.
В этом случае он почти подобен простой логической переменной, и часто именно так его и используют. Но, как видно из формата файла,
инфопорция при установке может также делать дополнительные действия:
1. выполнить заданную скриптовую функцию, заданную тегом action. Функция должна иметь вид

function action_name(who)
end

Где who - это клиентский объект того, кому был выдан инфопорция.
2. забрать другую инфопорцию, которая определяется тегом disable
3. активировать в PDA статью, заданную тегом article и деактивировать статью, заданную тегом article_disable
4. выдать задачу, заданную тегом task
5. добавить диалог, заданный тегом dialog
К сожалению нет возможности выполнить действие при снятии инфопорции.
Всех этих действий может быть произвольное количество. Естественно, не все действия имеют смысл для всех объектов, часть только для актора. Тут до конца не проверял, смотрите сами.



fo Portions System (сокращенно принято называть, infoportions, на русском языке кто как пишет...)

Система сюжетной информации (ССИ) нужна для обеспечения происхождения и запоминания сюжетных событий в игре.

При помощи ССИ можно создавать порции сюжетной информации (info portions).


Каждая из таких порций имеет/должна иметь уникальный текстовый id и является просто флажком в реестре, который автоматически загружается и сохраняется.

К возможностям info_portion относится:

запуск функции по отношению к персонажу при получении info_portion (action)
добавления локаций на карту (location)
возможность инициирования диалогов актером (dialog)
возможность инициирования диалогов у актера (при разговоре с персонажем, который имеет info_portion) (actor_dialog)
добавления статей в энциклопедию (article)
добавление заданий и в меню заданий (task)
удаление из реестра уже известных info_portions (disable)
добавление каких-либо данных в секцию "данные"

И ещё не совсем уверен, give_info_portion_via_pda(info_id, who) - получить информацию по идентификатору от указанного объекта

Поправь, у себя дополни, и удали мой пост. )) Моя копеишный вклад. Вроде где-то видел реализацию отлова отключения инфов, а добавление актеру инфов - легко отлавливается, как впрочем у нпс,

Некоторые комментарии (malandrinus):
- Добавление локаций (тег location) и тег actor_dialog по всей видимости были в ранних билдах. В релизе их нет.
- вроде как можно косвенно инициировать простановку метки на карте через выдачу задания.
- Тег dialog, насколько я понял, по любому добавляет диалог к диалогам актора, поскольку стартовых диалогов может быть только один (об этом будет в следующих статьях). Впрочем, даже этот тег, хоть и работает, в оригинальной игре используется всего в одном инфопоршене (а именно global_dialogs), и то я не уверен, работает ли на самом деле.
- Что такое "добавление в секцию 'данные' ", не совсем представляю. Возможно тоже что-то из старых билдов.
- Функция give_info_portion_via_pda опять же была в билде 1935. В релизе такой нет. Могу только предположить, что она имела отношение к полносимуляционной игре, когда сталкеры были равноправными игроками наравне с актором. Возможно, с ними можно было как-то общаться через PDA. Но сейчас это уже из области фантазий.

Вводные слова добавлю, спасибо.

Также вдогонку ещё интересный пример использования инфопоршенов. Имеются специальные инфопоршены, которые выдаются актору при включении/выключении элементов пользовательского интерфейса и по специальным системным событиям:
Список
ui_pda
ui_pda_hide - закрытия кпк
ui_pda_contacts - открытие окна контактов в кпк
ui_pda_contacts_hide - закрытие или переключения окна контактов
ui_pda_map_local
ui_pda_map_global - открытие вкладки глобальной карты
ui_pda_news - открытия вкладки новостей
ui_pda_news_hide - переключение с вкладки новостей
ui_pda_jobs_failed - окрытие вкладки проваленных задач
ui_pda_jobs_accomplished - открытие вкладки завершенных успешно задач
ui_pda_jobs_current - открытие вкладки текущих задач
ui_pda_jobs - открытие вкладки задач
ui_pda_jobs_hide - переключение с вкладки задач
ui_pda_diary - открытия вкладки дневника
ui_pda_diary_hide - закрытия=е или переключение вкладки дневника
ui_pda_encyclopedia - открытие вкладки энциклопедии
ui_pda_encyclopedia_hide - переключение с вкладки энцклопедии
ui_pda_actor_info
ui_pda_ranking - открытие вкладки рейтинга
ui_pda_events - открытие вкладки
ui_inventory открытие инвентаря
ui_inventory_hide - закрытие инвентаря
ui_talk - открытие диалога
ui_talk_hide - закрытие диалога
ui_trade - открытие торговли
ui_trade_hide - закрытие торговли
ui_car_body - открытие инвентаря трупа
ui_car_body_hide - закрытие инвенторя трупа
autojump_enabled
Назначение более-менее ясно из названия. Если прописать в эти инфопоршены тег action, то можно получить скриптовые колбеки на соответствующие события.


Продолжим. На очереди система профилей сталкеров, включая систему генерации имён.

Профили
Если коротко, то система профилей такая:
- В секции сталкера указан параметр character_profile. Если не указан, то принимается значение default.
- это имя указывает на профиль из файла, который прописан в system.ltx в разделе [profiles] в параметре files. Обычно это config\gameplay\npc_profile.xml
- По информации из этого профиля и по специальному алгоритму уже выбирается один из профилей, содержащих конкретную информацию о NPC. Все эти профили находятся в нескольких файлах, перечисленных в system.ltx в разделе [profiles] в параметре specific_characters_files.

Теперь подробнее. Вот пример файла с двумя вариантами создания character profile:

<?xml version='1.0' encoding="UTF-8"?>
<xml>
    <character id="profile_1">
        <specific_character>specific_character_profile_1</specific_character>
    </character>
    <character id="profile_2">
        <class>class_name</class>
        <rank>500</rank>
        <reputation>300</reputation>
    </character>
</xml>

Два этих варианта определяют два разных алгоритма выбора конкретного specific characters profile.
Первый вариант profile_1 содержит тег specific_character, который указывает на конкретный specific characters profile. В этом случае все остальные теги игнорируются. Этот вариант используется к примеру для актора. Его можно использовать для разных квестовых персонажей.
Второй вариант profile_2 используется для выбора одного из многих возможных профилей, используя параметры class, rank и reputation. Алгоритм выбора будет описан далее.

Пример файла с профилем персонажа:

<?xml version='1.0' encoding="windows-1251"?>
<xml>
    <specific_character id="specific_character_profile_name" no_random = "0" team_default = "1">
        <class>class_name_1</class>
        <class>class_name_2</class>
        <bio>...</bio>
        <npc_config>...</npc_config>
        <icon>...</icon>
        <name>...</name>
        <panic_threshold>...</panic_threshold>
        <hit_probability_factor>...</hit_probability_factor>
        <crouch_type>...</crouch_type>
        <critical_wound_weights>...</critical_wound_weights>
        <visual>...</visual>
        <supplies>...</supplies>
        <snd_config>...</snd_config>
        <terrain_sect>...</terrain_sect>
        <community>...</community>
        <rank>...</rank>
        <reputation>...</reputation>
        <money min="100" max="500" infinitive="0"/>
        <start_dialog>...</start_dialog>
        <actor_dialog>...</actor_dialog>
        <actor_dialog>...</actor_dialog>
    </specific_character>
</xml>

Расшифровка параметров профиля
no_random исключает данный профиль из списка случайного выбора (см. далее описание алгоритма выбора)
team_default включает профиль в список дефолтовых при случайном выборе (см. далее описание алгоритма выбора)
no_random и team_default не могут быть установлены одновременно.

class - по этому параметру будет найден профиль. Этих тегов может быть несколько, т.е. разные character_profile с разными классами могут ссылаться на один и тот-же specific_character_profile.
name - человеческое имя персонажа. Алгоритм генерации описан далее.
icon - иконка персонажа в окне торговли
panic_threshold - некое пороговое значение для паники. Непонятно, влияет ли на что-то.
hit_probability_factor - фактор "меткости" сталкера. При нуле будет мазать стопроцентно.
crouch_type - тип приседания: 0 - обычное, 1 - низкое (у бандитов такое), -1 - случайный выбор
critical_wound_weights - какие-то весовые коэффициенты. Обычно выглядит так:

<critical_wound_weights>75,25,25</critical_wound_weights>

как-то управляет параметрами ранения, но как именно - не знаю.
visual - путь к модели
supplies - стартовый инвентарь. Примеры смотри в игре.
snd_config - имя папки, из которой берутся звуки
terrain_sect - ссылается на секцию в system.ltx. Пример такой секции для сталкеров.

[stalker_terrain]
    255,000,255,255
    008,001,255,255;Разрешено ходить по опасным местам на баре
    012,001,255,255;Разрешено ходить по опасным местам на Милитари

Что-то это всё означает, но что - точно не знаю.
community - группировка
rank - ранг
reputation - репутация
money - количество денег. Имеют значение только атрибуты min, max и infinitive. Значение тега задавать не надо. infinitive имеет смысл задавать для торговцев.
start_dialog - стартовый диалог. Это диалог, с которого всегда начинается общение. Первым в нём говорит собеседник. Стартовый диалог может быть только один. Если не задан, то устанавливается диалог с именем "hello_dialog".
actor_dialog - диалог актора. В этом диалоге первую фразу говорит актор. Этот дилог можно начать после того, как закончится стартовый дилог. Их может быть несколько.

читаются, но не используются
bio - биография, в игре нигде не отображается.
npc_config - понятия не имею, зачем нужен.

Обращаю внимание на то, что часть параметров дублируются здесь и в секции спавна. Что имеет приоритет, точно не знаю. Только насчёт визуала точно знаю, что берётся именно из профиля.

Теперь об алгоритме выбора профиля для варианта с тегом class.

Профилей specific_character с одним классом может быть несколько. Движок находит все профайлы, в которых присутствует тег class с нужным значением (напоминаю на всякий случай, что тегов class может быть несколько). Конкретный профиль случайным образом выбирается из всех найденных. При этом имена профилей, заданные атрибутом id не важны и могут быть совершенно любыми (но не могут повторяться). Профили с включённым флажком no_random исключаются из этого алгоритма. Теперь несколько непонятных моментов. Имеется также флажок team_default и два параметра в character_profile - rank и reputation. Похоже на то, что при выборе профиля из многих подходящих по классу можно ещё и фильтровать их по этим двум параметрам. Флажок team_default также каким-то образом влияет на процесс фильтрации. Но подробностей выяснить пока не удалось.

Часть из параметров, описанных в профиле, доступны со скриптовой стороны.
Для этого есть методы класса game_object:
profile_name - имя профиля. К сожалению - это имя корневого профиля character_profile, а не specific_character. Если профиль был выбран случайно, то узнать, какой именно, практически невозможно.
character_name - человеческое имя, сгенерированное по описанному здесь алгоритму.
character_reputation - узнать репутацию
change_character_reputation - изменить репутацию
character_rank - получить ранг
set_character_rank - установить ранг
character_community - получить имя группировки
set_character_community - сменить группировку (там ещё можно менять команду и сквад)
money - узнать, сколько денег
transfer_money - передать деньги
give_money - дать денег
sound_prefix - расположение звуков (параметр, задаваемый тегом snd_config)
set_start_dialog - установить новый стартовый диалог
restore_default_start_dialog - вернуть исходный из профиля
get_start_dialog - по идее должна вернуть строку с именем диалога, но совершенно точно не работает и возвращает nil

Алгоритм генерации имён
1. Если имя может быть транслировано функцией game.translate_string(), то это и будет имя. Так можно задавать имена уникальным персонажам.
2. Если имя имеет вид "GENERATE_NAME_<suffix>", то имя составляется из имени и фамилии так:
- из system.ltx читается секция stalker_names_<suffix>, где должны быть два параметра name_cnt - количество вариантов имён, last_name_cnt - количество вариантов фамилий.
- далее составляется строка вида "name_<suffix>_N", где N - случайное число в пределах [0..name_cnt] (а может до name_cnt-1). Эта строка преобразуется в локализованное имя, как если бы обрабатывалась функцией game.translate_string() (см. описание этой функции в разделе "пространства имён"). Файл с именами обычно имеет имя stable_generate_fnames.xml, но может быть и другим. И сами имена можно размещать где угодно, см. опять же описание translate_string.
- аналогично получается фамилия. Составляется строка вида "lname_<suffix>_N" и получается локализованная фамилия по тому же алгоритму.
- результирующее имя составляется из имени и фамилии, раделённых пробелом.
3. Если не работает ни первый, ни второй вариант, то имя принимается прямо таким, как прописано в теге name.



[stalker_terrain]
    255,000,255,255
    008,001,255,255;Разрешено ходить по опасным местам на баре
    012,001,255,255;Разрешено ходить по опасным местам на Милитари

У каждого геймвертекса в гейм.графе есть поле type(по GraphViewer), а в stalker_terrain записано что-то вроде маски.
На баре у геймвертексов type бывает 08, 00, 00, 00 и 08, 01, 00, 00

Собственно расшифровка чисел в файле game_graphs.ltx
location_0 - первое число, location_1 - второе и так далее

В ЧН/ЗП добавили в типы гейм-вертексов еще и привязку к смарттерейнам - как я понимаю, чтобы через вражеские лагеря не ходили.
Также добавились функции: add_location_type, clear_location_types
При переходе из смарта в смартc помощью этих функций НПЦ добавляются новые stalker_terrain


Кстати, по поводу инфопорций в ЗП: в хмл прописывать их необязательно - можно выдавать абсолютно любую инфопорцию. И теги(типа action, disable) не работают

Дополню про money и infinitive, на форуме периодически проскакивают вопросы про это smile.gif
<money min="100" max="500" infinitive="1"/>
Если поставить infinitive = "1", то денег у него все равно будет столько, сколько прописано в max. Просто при начале каждой торговли количество денег будет устанавливаться в max 



